---
import Layout from "@layouts/Layout.astro";
import { client } from "@utils/sanity.ts";

interface Comment {
  _id: string;
  name: string;
  email: string;
  comment: string;
  _createdAt: string;
  replies?: Comment[];
}

interface BlogPost {
  _id: string;
  slug: { current: string };
  name: string;
  PublicationDate: string;
  ContentBody: any[];
  Summary?: any[];
  FurtherReading?: any[];
  comments?: Comment[];
}

export async function getStaticPaths() {
  console.log("Starting getStaticPaths");
  const posts = await client.fetch<BlogPost[]>(`*[_type == "blog"]{
    _id,
    slug,
    name,
    PublicationDate,
    ContentBody,
    Summary,
    FurtherReading,
    "comments": *[_type == "comment" && post._ref == ^._id && approved == true]{
      _id,
      name,
      email,
      comment,
      _createdAt,
      "replies": *[_type == "comment" && parentComment._ref == ^._id && approved == true]{
        _id,
        name,
        email,
        comment,
        _createdAt
      }
    }
  }`);
  
  console.log("Fetched posts:", posts);

  const paths = posts.map((post: BlogPost) => {
    console.log("Processing post:", post._id);
    return {
      params: { slug: post.slug.current },
      props: {
        _id: post._id,
        name: post.name,
        PublicationDate: post.PublicationDate,
        ContentBody: post.ContentBody,
        Summary: post.Summary,
        FurtherReading: post.FurtherReading,
        slug: post.slug.current,
        comments: post.comments
      }
    };
  });

  console.log("Returning paths:", paths);
  return paths;
}

export const prerender = true;
const { name, _id, PublicationDate, ContentBody, Summary, FurtherReading, slug, comments } = Astro.props;

const formattedDate = new Date(PublicationDate).toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
});

function renderPortableText(blocks: any[]): string {
  if (!blocks || !Array.isArray(blocks)) return '';
  return blocks.map(block => {
    if (block._type === 'block' && block.children) {
      return block.children.map((child: { text: string }) => child.text).join('');
    }
    return '';
  }).join('\n\n');
}

function isValidContent(content: any[] | undefined): content is any[] {
  return Array.isArray(content) && content.length > 0;
}
---

<Layout title={name || 'Blog Post'}>
  <div class="container mx-auto">
    <div class="mx-auto max-w-3xl mt-14">
      <h1 class="text-4xl lg:text-5xl font-bold lg:tracking-tight mt-1 lg:leading-tight">
        {name || 'Loading...'}
      </h1>
      <div class="flex gap-2 mt-3 items-center flex-wrap md:flex-nowrap">
        <span class="text-gray-400">
          Sapna Deb
        </span>
        <span class="text-gray-400">•</span>
        <time class="text-gray-400" datetime={formattedDate}>
          {formattedDate}
        </time>
      </div>
    </div>

    {isValidContent(ContentBody) ? (
      <div class="mx-auto prose prose-lg mt-6 max-w-3xl">
        {ContentBody.map((block: any, index: number) => (
          <p key={index} set:html={renderPortableText([block])} />
        ))}
      </div>
    ) : (
      <p class="mx-auto prose prose-lg mt-6 max-w-3xl">No content available</p>
    )}

    {isValidContent(Summary) && (
      <div class="mx-auto prose prose-lg mt-6 max-w-3xl">
        <h2>Summary</h2>
        {Summary.map((block: any, index: number) => (
          <p key={index} set:html={renderPortableText([block])} />
        ))}
      </div>
    )}

    {isValidContent(FurtherReading) && (
      <div class="text-gray-400 mx-auto prose prose-lg mt-6 max-w-3xl">
        <h2>Further Reading</h2>
        {FurtherReading.map((block: any, index: number) => (
          <p key={index} set:html={renderPortableText([block])} />
        ))}
      </div>
    )}

    <div class="text-center mt-8">
      <a
        href="/blog"
        class="bg-gray-100 px-5 py-3 rounded-md hover:bg-gray-200 transition">
        ← Back to Blog
      </a>
    </div>
    
    <!-- Comment submission form -->
    <div class="comment-form-container mx-auto max-w-3xl mt-8 p-6 bg-white rounded-md shadow-md">
      <h2 class="text-2xl font-semibold mb-4">Submit a Comment</h2>
      <form method="POST" action={`/api/submitComment?postId=${_id}`} class="main-comment-form">
        <input 
          type="text" 
          name="name" 
          placeholder="Your name" 
          required 
          class="w-full p-3 mb-4 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" 
        />
        <input 
          type="email" 
          name="email" 
          placeholder="Your email" 
          required 
          class="w-full p-3 mb-4 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" 
        />
        <textarea 
          name="comment" 
          placeholder="Your comment" 
          required 
          class="w-full p-3 mb-4 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" 
          rows="5"></textarea>
        <button 
          type="submit" 
          id="submitCommentButton"
          class="w-full p-3 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition">
          Submit Comment
        </button>
      </form>
    </div>

    <!-- Comments section -->
    <div class="comments-section mx-auto max-w-3xl mt-8">
      <h2 class="text-2xl font-semibold mb-4">Comments</h2>
      {comments && comments.length > 0 ? (
        comments.map((comment: Comment) => (
          <div key={comment._id} class="comment mb-4 p-4 bg-gray-100 rounded-md">
            <p><strong>{comment.name}</strong> <span class="text-gray-400">on {new Date(comment._createdAt).toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            })}</span></p>
            <p>{comment.comment}</p>
            <button class="reply-button text-blue-600 mt-2" data-comment-id={comment._id}>Reply</button>
            
            <!-- Reply form (hidden by default) -->
            <form class="reply-form hidden mt-4" data-parent-id={comment._id}>
              <input type="text" name="name" placeholder="Your name" required class="w-full p-2 mb-2 border border-gray-300 rounded-md" />
              <input type="email" name="email" placeholder="Your email" required class="w-full p-2 mb-2 border border-gray-300 rounded-md" />
              <textarea name="comment" placeholder="Your reply" required class="w-full p-2 mb-2 border border-gray-300 rounded-md"></textarea>
              <button type="submit" class="p-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition">Submit Reply</button>
            </form>

            <!-- Replies -->
            {comment.replies && comment.replies.length > 0 && (
              <div class="replies ml-8 mt-4">
                {comment.replies.map((reply: Comment) => (
                  <div key={reply._id} class="reply mb-2 p-3 bg-gray-50 rounded-md">
                    <p><strong>{reply.name}</strong> <span class="text-gray-400">on {new Date(reply._createdAt).toLocaleDateString('en-US', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric'
                    })}</span></p>
                    <p>{reply.comment}</p>
                  </div>
                ))}
              </div>
            )}
          </div>
        ))
      ) : (
        <p>No comments yet.</p>
      )}
    </div>
  </div>

  <script>
    // Handle reply button clicks
    document.querySelectorAll('.reply-button').forEach(button => {
      button.addEventListener('click', () => {
        const commentId = (button as HTMLElement).dataset.commentId;
        const replyForm = document.querySelector(`.reply-form[data-parent-id="${commentId}"]`);
        if (replyForm) {
          replyForm.classList.toggle('hidden');
        }
      });
    });

    // Handle reply form submissions
    document.querySelectorAll('.reply-form').forEach(form => {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const formData = new FormData(form as HTMLFormElement);
        const mainForm = document.querySelector('.main-comment-form') as HTMLFormElement;
        const postId = new URL(mainForm.action).searchParams.get('postId');
        formData.append('parentCommentId', (form as HTMLElement).dataset.parentId || '');
        
        try {
          const response = await fetch(`/api/submitComment?postId=${postId}`, {
            method: 'POST',
            body: formData
          });
          
          if (response.ok) {
            alert('Reply submitted successfully. It will be reviewed and approved.');
            (form as HTMLFormElement).reset();
            form.classList.add('hidden');
          } else {
            alert('Failed to submit reply. Please try again.');
          }
        } catch (error) {
          console.error('Error submitting reply:', error);
          alert('An error occurred while submitting your reply. Please try again.');
        }
      });
    });

    // Handle main comment form submission
    const mainCommentForm = document.querySelector('.main-comment-form');
    if (mainCommentForm) {
      mainCommentForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const form = e.target as HTMLFormElement;
        const formData = new FormData(form);
        
        try {
          const response = await fetch(form.action, {
            method: 'POST',
            body: formData
          });
          
          if (response.ok) {
            alert('Comment submitted successfully. It will be reviewed and approved.');
            form.reset();
          } else {
            alert('Failed to submit comment. Please try again.');
          }
        } catch (error) {
          console.error('Error submitting comment:', error);
          alert('An error occurred while submitting your comment. Please try again.');
        }
      });
    }
  </script>
</Layout>